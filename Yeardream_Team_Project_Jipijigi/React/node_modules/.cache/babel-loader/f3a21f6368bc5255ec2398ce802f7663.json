{"ast":null,"code":"var _jsxFileName = \"E:\\\\ASJ\\\\AS_J(SW)\\\\MyProjects\\\\Team Projects\\\\Yeardream_Team_Project_Jipijigi\\\\React\\\\src\\\\components\\\\Culture.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Bar, Doughnut, Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Culture = () => {\n  _s();\n\n  const [confirmedData, setconfirmedData] = useState({\n    labels: ['1'],\n    datasets: [{\n      label: \"국내 누적 확진자\",\n      backgroundColor: \"red\",\n      fill: true,\n      data: 1\n    }]\n  });\n  const [quarantinedData, setquarantinedData] = useState({\n    labels: ['1'],\n    datasets: [{\n      label: \"월별 격리자\",\n      borderColor: \"red\",\n      fill: false,\n      data: 1\n    }]\n  });\n  const [deathData, setdeathData] = useState({\n    labels: ['1'],\n    datasets: [{\n      label: \"월별 사망자\",\n      borderColor: \"red\",\n      fill: false,\n      data: 1\n    }]\n  });\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\");\n      makeData(res.data);\n    };\n\n    const makeData = items => {\n      // items.forEach(item=> console.log(item))\n      const arr = items.reduce((acc, cur) => {\n        const currentDate = new Date(cur.Date);\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const date = currentDate.getDate();\n        const confirmed = cur.Confirmed;\n        const active = cur.Active;\n        const death = cur.Deaths;\n        const recovered = cur.Recovered;\n        const findItem = acc.find(a => a.year === year && a.month === month); // 아이템이 없는것을 먼저 확인해서 초기값을 넣어준다\n\n        if (!findItem) {\n          acc.push({\n            year,\n            month,\n            date,\n            confirmed,\n            active,\n            death,\n            recovered\n          });\n        } // 아이템이 있으면 월의 마지막 날짜까지 누적한다.\n\n\n        if (findItem && findItem.date < date) {\n          findItem.active = active;\n          findItem.death = death;\n          findItem.date = date;\n          findItem.year = year;\n          findItem.month = month;\n          findItem.confirmed = confirmed;\n          findItem.recovered = recovered;\n        } // console.log(cur,year,month,date)\n\n\n        return acc;\n      }, []);\n      const arr1 = items.reduce((acc, cur) => {\n        const currentDate = new Date(cur.Date);\n        const year = currentDate.getFullYear();\n        const month = currentDate.getMonth();\n        const date = currentDate.getDate();\n        const dayconfirmed = cur.Confirmed;\n        const findItem = acc.find(a => a.year === year && a.month === month); // 아이템이 없는것을 먼저 확인해서 초기값을 넣어준다\n\n        if (!findItem) {\n          acc.push({\n            year,\n            month,\n            date,\n            dayconfirmed\n          });\n        } // 아이템이 있으면 월의 마지막 날짜까지 누적한다.\n\n\n        if (findItem && findItem.date < date) {\n          findItem.date = date;\n          findItem.year = year;\n          findItem.month = month;\n          findItem.dayconfirmed = dayconfirmed;\n        } // console.log(cur,year,month,date)\n\n\n        return acc;\n      }, []); // console.log(arr1)\n      // console.log(arr)\n\n      const labels = arr.map(a => `${a.month + 1}월`); // console.log(labels)\n      // console.log(arr.map(a=> a.confirmed))\n\n      setconfirmedData({\n        labels,\n        datasets: [{\n          label: \"국내 누적 확진자\",\n          backgroundColor: \"red\",\n          fill: true,\n          data: arr.map(a => a.confirmed)\n        }]\n      });\n      setquarantinedData({\n        labels,\n        datasets: [{\n          label: \"월별 격리자\",\n          borderColor: \"red\",\n          fill: false,\n          data: arr.map(a => a.active)\n        }]\n      }); // console.log(arr.map(a=> a.death))\n      // console.log(arr)\n\n      setdeathData({\n        labels,\n        datasets: [{\n          label: \"월별 사망자\",\n          borderColor: \"red\",\n          fill: false,\n          data: arr.map(a => a.death)\n        }]\n      });\n    };\n\n    fetchEvents();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"\\uAD6D\\uB0B4 \\uCF54\\uB85C\\uB098 \\uD604\\uD669\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contents\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Bar, {\n            data: confirmedData,\n            options: ({\n              title: {\n                display: true,\n                text: \"누적 확진자 추이\",\n                fontsize: 16\n              }\n            }, {\n              legend: {\n                dispaly: true,\n                position: \"bottom\"\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: quarantinedData,\n            options: ({\n              title: {\n                display: true,\n                text: \"월별 격리자 현황\",\n                fontsize: 16\n              }\n            }, {\n              legend: {\n                dispaly: true,\n                position: \"bottom\"\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Line, {\n            data: deathData,\n            options: ({\n              title: {\n                display: true,\n                text: \"월별 사망자 현황\",\n                fontsize: 16\n              }\n            }, {\n              legend: {\n                dispaly: true,\n                position: \"bottom\"\n              }\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Culture, \"BVDrHAGqpL36wLeEEFTz8X+IkHw=\");\n\n_c = Culture;\nexport default Culture;\n\nvar _c;\n\n$RefreshReg$(_c, \"Culture\");","map":{"version":3,"sources":["E:/ASJ/AS_J(SW)/MyProjects/Team Projects/Yeardream_Team_Project_Jipijigi/React/src/components/Culture.js"],"names":["useState","useEffect","axios","Bar","Doughnut","Line","Culture","confirmedData","setconfirmedData","labels","datasets","label","backgroundColor","fill","data","quarantinedData","setquarantinedData","borderColor","deathData","setdeathData","fetchEvents","res","get","makeData","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","a","push","arr1","dayconfirmed","map","textAlign","title","display","text","fontsize","legend","dispaly","position"],"mappings":"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","sourcesContent":["import {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2'\r\n\r\nconst Culture = () => {\r\n\r\n\r\n  const [confirmedData, setconfirmedData] = useState({\r\n    labels: ['1'],\r\n    datasets: [\r\n      {\r\n        label: \"국내 누적 확진자\",\r\n        backgroundColor: \"red\",\r\n        fill: true,\r\n        data: 1\r\n      },\r\n    ]\r\n  })\r\n  const [quarantinedData, setquarantinedData] = useState({\r\n    labels: ['1'],\r\n    datasets: [\r\n      {\r\n        label: \"월별 격리자\",\r\n        borderColor: \"red\",\r\n        fill: false,\r\n        data: 1\r\n      },\r\n    ]\r\n  })\r\n\r\n  const [deathData, setdeathData] = useState({\r\n    labels: ['1'],\r\n    datasets: [\r\n      {\r\n        label: \"월별 사망자\",\r\n        borderColor: \"red\",\r\n        fill: false,\r\n        data: 1\r\n      },\r\n    ]\r\n  })\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchEvents = async () => {\r\n      const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n      makeData(res.data)\r\n    }\r\n    const makeData = (items) => {\r\n      // items.forEach(item=> console.log(item))\r\n      const arr = items.reduce((acc, cur)=>{\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n        const confirmed = cur.Confirmed;\r\n        const active = cur.Active;\r\n        const death = cur.Deaths;\r\n        const recovered = cur.Recovered;\r\n\r\n        const findItem = acc.find(a=> a.year === year && a.month === month);\r\n        // 아이템이 없는것을 먼저 확인해서 초기값을 넣어준다\r\n        if(!findItem){\r\n          acc.push({year, month, date, confirmed, active, death, recovered})\r\n        }\r\n        // 아이템이 있으면 월의 마지막 날짜까지 누적한다.\r\n        if(findItem && findItem.date < date){\r\n          findItem.active = active;\r\n          findItem.death = death;\r\n          findItem.date = date;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.confirmed = confirmed;\r\n          findItem.recovered = recovered;\r\n        }\r\n        \r\n        \r\n        // console.log(cur,year,month,date)\r\n        return acc;\r\n      },[])\r\n      const arr1 = items.reduce((acc, cur)=>{\r\n        const currentDate = new Date(cur.Date);\r\n        const year = currentDate.getFullYear();\r\n        const month = currentDate.getMonth();\r\n        const date = currentDate.getDate();\r\n        const dayconfirmed = cur.Confirmed;\r\n        \r\n\r\n        const findItem = acc.find(a=> a.year === year && a.month === month);\r\n        // 아이템이 없는것을 먼저 확인해서 초기값을 넣어준다\r\n        if(!findItem){\r\n          acc.push({year, month, date, dayconfirmed})\r\n        }\r\n        // 아이템이 있으면 월의 마지막 날짜까지 누적한다.\r\n        if(findItem && findItem.date < date){\r\n          findItem.date = date;\r\n          findItem.year = year;\r\n          findItem.month = month;\r\n          findItem.dayconfirmed = dayconfirmed;\r\n          \r\n        }\r\n        \r\n        \r\n        // console.log(cur,year,month,date)\r\n        return acc;\r\n      },[])\r\n      // console.log(arr1)\r\n      // console.log(arr)\r\n      const labels = arr.map(a => `${a.month + 1}월`);\r\n      // console.log(labels)\r\n      // console.log(arr.map(a=> a.confirmed))\r\n      setconfirmedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"국내 누적 확진자\",\r\n            backgroundColor: \"red\",\r\n            fill: true,\r\n            data: arr.map(a => a.confirmed)\r\n          },\r\n        ]\r\n      });\r\n      setquarantinedData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"월별 격리자\",\r\n            borderColor: \"red\",\r\n            fill: false,\r\n            data: arr.map(a => a.active)\r\n          },\r\n        ]\r\n      });\r\n      // console.log(arr.map(a=> a.death))\r\n      // console.log(arr)\r\n      setdeathData({\r\n        labels,\r\n        datasets: [\r\n          {\r\n            label: \"월별 사망자\",\r\n            borderColor: \"red\",\r\n            fill: false,\r\n            data: arr.map(a => a.death)\r\n          },\r\n        ]\r\n      });\r\n\r\n    }\r\n    fetchEvents()\r\n\r\n  },[])\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2 style={{textAlign: 'center'}}>국내 코로나 현황</h2>\r\n        <div className=\"contents\">\r\n          <div>\r\n            <Bar data={confirmedData} options={\r\n              {title: {display: true, text: \"누적 확진자 추이\", fontsize: 16}},\r\n              {legend: {dispaly: true, position: \"bottom\"}}\r\n            } />\r\n          </div>\r\n          <div>\r\n            <Line data={quarantinedData} options={\r\n              {title: {display: true, text: \"월별 격리자 현황\", fontsize: 16}},\r\n              {legend: {dispaly: true, position: \"bottom\"}}\r\n            } />\r\n          </div>\r\n          <div>\r\n            <Line data={deathData} options={\r\n              {title: {display: true, text: \"월별 사망자 현황\", fontsize: 16}},\r\n              {legend: {dispaly: true, position: \"bottom\"}}\r\n            } />\r\n          </div>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Culture\r\n"]},"metadata":{},"sourceType":"module"}