{"ast":null,"code":"var _jsxFileName = \"E:\\\\ASJ\\\\AS_J(SW)\\\\MyProjects\\\\Team Projects\\\\Yeardream_Team_Project_Jipijigi\\\\React\\\\src\\\\components\\\\Flask.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // const Flask = () => {\n//   const [data, setData] = useState([{}])\n//   useEffect(() => {\n//     const fetchEvents = async () => {\n//       const res = await axios.get(\"http://localhost:5000/members\")\n//       makeData(res.data)\n//     }\n//     const makeData = (items) => {\n//       items.forEach(item=> console.log(item))\n//       const arr = items.reduce((acc, cur)=>{\n//         const currentDate = new Date(cur.Date);\n//         const year = currentDate.getFullYear();\n//         const month = currentDate.getMonth();\n//         const date = currentDate.getDate();\n//         const members = cur.MembersCount;\n//         const active = cur.Active;\n//         // const findItem = acc.find(a=> a.year === year && a.month === month);\n//         // // 아이템이 없는것을 먼저 확인해서 초기값을 넣어준다\n//         // if(!findItem){\n//         //   acc.push({year, month, date, members, active})\n//         // }\n//         // // 아이템이 있으면 월의 마지막 날짜까지 누적한다.\n//         // if(findItem && findItem.date < date){\n//         //   findItem.active = active;\n//         //   findItem.date = date;\n//         //   findItem.year = year;\n//         //   findItem.month = month;\n//         //   findItem.members = members;\n//         // }\n//         console.log(cur,year,month,date)\n//         return acc;\n//       },[])\n//       console.log(arr)\n//     }\n//     fetchEvents()\n//   },[])\n//   return (\n//     <div>\n//     </div>\n//   )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Flask = () => {\n  _s();\n\n  const [data, setData] = useState([{}]);\n  useEffect(() => {\n    fetch(\"/members\").then(res => res.json()).then(data => {\n      setData(data);\n      console.log(data); // data.forEach(\n      //   item=> console.log(item)\n      // )\n    });\n  }, []);\n  const flasklist = data.map((item, index) => console.log(item.MembersCount));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flask\",\n    children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.사람숫자\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 36\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Flask, \"odp7ftN9IDg1xewk47EaAZiwHYc=\");\n\n_c = Flask;\nexport default Flask;\n\nvar _c;\n\n$RefreshReg$(_c, \"Flask\");","map":{"version":3,"sources":["E:/ASJ/AS_J(SW)/MyProjects/Team Projects/Yeardream_Team_Project_Jipijigi/React/src/components/Flask.js"],"names":["React","useState","useEffect","axios","Flask","data","setData","fetch","then","res","json","console","log","flasklist","map","item","index","MembersCount","사람숫자"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;;;;AAKA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,CAAC,EAAD,CAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACbK,IAAAA,KAAK,CAAC,UAAD,CAAL,CAAkBC,IAAlB,CACEC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADT,EAEEF,IAFF,CAGEH,IAAI,IAAI;AACNC,MAAAA,OAAO,CAACD,IAAD,CAAP;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ,EAFM,CAGN;AACA;AACA;AACD,KATH;AAWD,GAZQ,EAYN,EAZM,CAAT;AAcA,QAAMQ,SAAS,GAAGR,IAAI,CAACS,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAkBL,OAAO,CAACC,GAAR,CAAYG,IAAI,CAACE,YAAjB,CAA3B,CAAlB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,cAEIZ,IAAI,CAACS,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,kBAAkB;AAAA,gBAAID,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,YAA3B;AAFJ;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CA1BD;;GAAMd,K;;KAAAA,K;AA4BN,eAAeA,KAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n// const Flask = () => {\r\n//   const [data, setData] = useState([{}])\r\n//   useEffect(() => {\r\n//     const fetchEvents = async () => {\r\n//       const res = await axios.get(\"http://localhost:5000/members\")\r\n//       makeData(res.data)\r\n//     }\r\n//     const makeData = (items) => {\r\n//       items.forEach(item=> console.log(item))\r\n//       const arr = items.reduce((acc, cur)=>{\r\n//         const currentDate = new Date(cur.Date);\r\n//         const year = currentDate.getFullYear();\r\n//         const month = currentDate.getMonth();\r\n//         const date = currentDate.getDate();\r\n//         const members = cur.MembersCount;\r\n//         const active = cur.Active;\r\n        \r\n//         // const findItem = acc.find(a=> a.year === year && a.month === month);\r\n//         // // 아이템이 없는것을 먼저 확인해서 초기값을 넣어준다\r\n//         // if(!findItem){\r\n//         //   acc.push({year, month, date, members, active})\r\n//         // }\r\n//         // // 아이템이 있으면 월의 마지막 날짜까지 누적한다.\r\n//         // if(findItem && findItem.date < date){\r\n//         //   findItem.active = active;\r\n//         //   findItem.date = date;\r\n//         //   findItem.year = year;\r\n//         //   findItem.month = month;\r\n//         //   findItem.members = members;\r\n//         // }\r\n        \r\n        \r\n//         console.log(cur,year,month,date)\r\n//         return acc;\r\n//       },[])\r\n//       console.log(arr)\r\n\r\n//     }\r\n//     fetchEvents()\r\n\r\n//   },[])\r\n\r\n//   return (\r\n//     <div>\r\n\r\n//     </div>\r\n//   )\r\n// }\r\n\r\n\r\n\r\n\r\nconst Flask = () => {\r\n  const [data, setData] = useState([{}])\r\n\r\n  useEffect(()=> {\r\n    fetch(\"/members\").then(\r\n      res => res.json()\r\n    ).then(\r\n      data => {\r\n        setData(data)\r\n        console.log(data)\r\n        // data.forEach(\r\n        //   item=> console.log(item)\r\n        // )\r\n      }\r\n    )\r\n  }, [])\r\n  \r\n  const flasklist = data.map((item, index) => (console.log(item.MembersCount)));\r\n\r\n  return (\r\n    <div className=\"flask\">\r\n      {\r\n        data.map((item, index) => (<p>{item.사람숫자}</p>))\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Flask\r\n"]},"metadata":{},"sourceType":"module"}